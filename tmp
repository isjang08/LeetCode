class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        //binary search 
        vector<int> ans;

        int start = 0; 
        int end = nums.size() - 1; 
        //search from start 
        while(nums[start] < target)
        {
            int mid = (start + end)/2;
            if(target < nums[mid])
                end = mid - 1;
            else if (nums[mid] < end)
                start = mid + 1;
            // mid가 연속된 숫자라면 가장 작은 숫자를 찾아줌. 
            else 
            {
                if(mid == 0)
                {
                    ans.push_back(start);
                    break;   
                }
                else if (nums[mid])
                {
                    ans.push_back(start);
                    break;   
                }   
                else
                    start = mid - 1;
            }           
        }
        
        int start = 0; 
        int end = nums.size() - 1; 
        //search from end
        while(nums[start] < target)
        {
            int mid = (start + end)/2;
            if(target < nums[mid])
                end = mid - 1;
            else if (nums[mid] < end)
                start = mid + 1;
            // mid가 연속된 숫자라면 가장 작은 숫자를 찾아줌. 
            else 
            {
                if(mid == 0)
                {
                    ans.push_back(start);
                    break;   
                }
                else if (nums[mid])
                {
                    ans.push_back(start);
                    break;   
                }   
                else
                    start = mid - 1;
            }           
        }
        
        return ans;
    }
};
